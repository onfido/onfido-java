/*
 * Onfido API v3.6
 * The Onfido API (v3.6)
 *
 * The version of the OpenAPI document: v3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.onfido.model.DeviceIntelligenceReport;
import com.onfido.model.DocumentReport;
import com.onfido.model.DocumentVideoReport;
import com.onfido.model.DocumentVideoWithAddressInformationReport;
import com.onfido.model.DocumentWithAddressInformationReport;
import com.onfido.model.DocumentWithDriverVerificationReport;
import com.onfido.model.DocumentWithDrivingLicenceInformationReport;
import com.onfido.model.FacialSimilarityMotionReport;
import com.onfido.model.FacialSimilarityPhotoFullyAutoReport;
import com.onfido.model.FacialSimilarityPhotoReport;
import com.onfido.model.FacialSimilarityVideoReport;
import com.onfido.model.IdentityEnhancedReport;
import com.onfido.model.IndiaPanReport;
import com.onfido.model.IndiaPanReportAllOfBreakdown;
import com.onfido.model.IndiaPanReportAllOfProperties;
import com.onfido.model.KnownFacesReport;
import com.onfido.model.ProofOfAddressReport;
import com.onfido.model.ReportDocument;
import com.onfido.model.ReportName;
import com.onfido.model.ReportResult;
import com.onfido.model.ReportStatus;
import com.onfido.model.ReportSubResult;
import com.onfido.model.UsDrivingLicenceReport;
import com.onfido.model.WatchlistAmlReport;
import com.onfido.model.WatchlistEnhancedReport;
import com.onfido.model.WatchlistPepsOnlyReport;
import com.onfido.model.WatchlistSanctionsOnlyReport;
import com.onfido.model.WatchlistStandardReport;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;  

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.onfido.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class Report extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(Report.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Report.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Report' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DocumentReport> adapterDocumentReport = gson.getDelegateAdapter(this, TypeToken.get(DocumentReport.class));
            final TypeAdapter<DocumentVideoReport> adapterDocumentVideoReport = gson.getDelegateAdapter(this, TypeToken.get(DocumentVideoReport.class));
            final TypeAdapter<DocumentVideoWithAddressInformationReport> adapterDocumentVideoWithAddressInformationReport = gson.getDelegateAdapter(this, TypeToken.get(DocumentVideoWithAddressInformationReport.class));
            final TypeAdapter<DocumentWithAddressInformationReport> adapterDocumentWithAddressInformationReport = gson.getDelegateAdapter(this, TypeToken.get(DocumentWithAddressInformationReport.class));
            final TypeAdapter<DocumentWithDrivingLicenceInformationReport> adapterDocumentWithDrivingLicenceInformationReport = gson.getDelegateAdapter(this, TypeToken.get(DocumentWithDrivingLicenceInformationReport.class));
            final TypeAdapter<DocumentWithDriverVerificationReport> adapterDocumentWithDriverVerificationReport = gson.getDelegateAdapter(this, TypeToken.get(DocumentWithDriverVerificationReport.class));
            final TypeAdapter<FacialSimilarityPhotoReport> adapterFacialSimilarityPhotoReport = gson.getDelegateAdapter(this, TypeToken.get(FacialSimilarityPhotoReport.class));
            final TypeAdapter<FacialSimilarityPhotoFullyAutoReport> adapterFacialSimilarityPhotoFullyAutoReport = gson.getDelegateAdapter(this, TypeToken.get(FacialSimilarityPhotoFullyAutoReport.class));
            final TypeAdapter<FacialSimilarityVideoReport> adapterFacialSimilarityVideoReport = gson.getDelegateAdapter(this, TypeToken.get(FacialSimilarityVideoReport.class));
            final TypeAdapter<FacialSimilarityMotionReport> adapterFacialSimilarityMotionReport = gson.getDelegateAdapter(this, TypeToken.get(FacialSimilarityMotionReport.class));
            final TypeAdapter<KnownFacesReport> adapterKnownFacesReport = gson.getDelegateAdapter(this, TypeToken.get(KnownFacesReport.class));
            final TypeAdapter<IdentityEnhancedReport> adapterIdentityEnhancedReport = gson.getDelegateAdapter(this, TypeToken.get(IdentityEnhancedReport.class));
            final TypeAdapter<WatchlistAmlReport> adapterWatchlistAmlReport = gson.getDelegateAdapter(this, TypeToken.get(WatchlistAmlReport.class));
            final TypeAdapter<WatchlistEnhancedReport> adapterWatchlistEnhancedReport = gson.getDelegateAdapter(this, TypeToken.get(WatchlistEnhancedReport.class));
            final TypeAdapter<WatchlistStandardReport> adapterWatchlistStandardReport = gson.getDelegateAdapter(this, TypeToken.get(WatchlistStandardReport.class));
            final TypeAdapter<WatchlistPepsOnlyReport> adapterWatchlistPepsOnlyReport = gson.getDelegateAdapter(this, TypeToken.get(WatchlistPepsOnlyReport.class));
            final TypeAdapter<WatchlistSanctionsOnlyReport> adapterWatchlistSanctionsOnlyReport = gson.getDelegateAdapter(this, TypeToken.get(WatchlistSanctionsOnlyReport.class));
            final TypeAdapter<ProofOfAddressReport> adapterProofOfAddressReport = gson.getDelegateAdapter(this, TypeToken.get(ProofOfAddressReport.class));
            final TypeAdapter<UsDrivingLicenceReport> adapterUsDrivingLicenceReport = gson.getDelegateAdapter(this, TypeToken.get(UsDrivingLicenceReport.class));
            final TypeAdapter<DeviceIntelligenceReport> adapterDeviceIntelligenceReport = gson.getDelegateAdapter(this, TypeToken.get(DeviceIntelligenceReport.class));
            final TypeAdapter<IndiaPanReport> adapterIndiaPanReport = gson.getDelegateAdapter(this, TypeToken.get(IndiaPanReport.class));

            final TypeAdapter<ReportShared> adapterReportShared = gson.getDelegateAdapter(this, TypeToken.get(ReportShared.class));

            return (TypeAdapter<T>) new TypeAdapter<Report>() {
                @Override
                public void write(JsonWriter out, Report value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `DocumentReport`
                    if (value.getActualInstance() instanceof DocumentReport) {
                        JsonElement element = adapterDocumentReport.toJsonTree((DocumentReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DocumentVideoReport`
                    if (value.getActualInstance() instanceof DocumentVideoReport) {
                        JsonElement element = adapterDocumentVideoReport.toJsonTree((DocumentVideoReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DocumentVideoWithAddressInformationReport`
                    if (value.getActualInstance() instanceof DocumentVideoWithAddressInformationReport) {
                        JsonElement element = adapterDocumentVideoWithAddressInformationReport.toJsonTree((DocumentVideoWithAddressInformationReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DocumentWithAddressInformationReport`
                    if (value.getActualInstance() instanceof DocumentWithAddressInformationReport) {
                        JsonElement element = adapterDocumentWithAddressInformationReport.toJsonTree((DocumentWithAddressInformationReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DocumentWithDrivingLicenceInformationReport`
                    if (value.getActualInstance() instanceof DocumentWithDrivingLicenceInformationReport) {
                        JsonElement element = adapterDocumentWithDrivingLicenceInformationReport.toJsonTree((DocumentWithDrivingLicenceInformationReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DocumentWithDriverVerificationReport`
                    if (value.getActualInstance() instanceof DocumentWithDriverVerificationReport) {
                        JsonElement element = adapterDocumentWithDriverVerificationReport.toJsonTree((DocumentWithDriverVerificationReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FacialSimilarityPhotoReport`
                    if (value.getActualInstance() instanceof FacialSimilarityPhotoReport) {
                        JsonElement element = adapterFacialSimilarityPhotoReport.toJsonTree((FacialSimilarityPhotoReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FacialSimilarityPhotoFullyAutoReport`
                    if (value.getActualInstance() instanceof FacialSimilarityPhotoFullyAutoReport) {
                        JsonElement element = adapterFacialSimilarityPhotoFullyAutoReport.toJsonTree((FacialSimilarityPhotoFullyAutoReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FacialSimilarityVideoReport`
                    if (value.getActualInstance() instanceof FacialSimilarityVideoReport) {
                        JsonElement element = adapterFacialSimilarityVideoReport.toJsonTree((FacialSimilarityVideoReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FacialSimilarityMotionReport`
                    if (value.getActualInstance() instanceof FacialSimilarityMotionReport) {
                        JsonElement element = adapterFacialSimilarityMotionReport.toJsonTree((FacialSimilarityMotionReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `KnownFacesReport`
                    if (value.getActualInstance() instanceof KnownFacesReport) {
                        JsonElement element = adapterKnownFacesReport.toJsonTree((KnownFacesReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IdentityEnhancedReport`
                    if (value.getActualInstance() instanceof IdentityEnhancedReport) {
                        JsonElement element = adapterIdentityEnhancedReport.toJsonTree((IdentityEnhancedReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WatchlistAmlReport`
                    if (value.getActualInstance() instanceof WatchlistAmlReport) {
                        JsonElement element = adapterWatchlistAmlReport.toJsonTree((WatchlistAmlReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WatchlistEnhancedReport`
                    if (value.getActualInstance() instanceof WatchlistEnhancedReport) {
                        JsonElement element = adapterWatchlistEnhancedReport.toJsonTree((WatchlistEnhancedReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WatchlistStandardReport`
                    if (value.getActualInstance() instanceof WatchlistStandardReport) {
                        JsonElement element = adapterWatchlistStandardReport.toJsonTree((WatchlistStandardReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WatchlistPepsOnlyReport`
                    if (value.getActualInstance() instanceof WatchlistPepsOnlyReport) {
                        JsonElement element = adapterWatchlistPepsOnlyReport.toJsonTree((WatchlistPepsOnlyReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WatchlistSanctionsOnlyReport`
                    if (value.getActualInstance() instanceof WatchlistSanctionsOnlyReport) {
                        JsonElement element = adapterWatchlistSanctionsOnlyReport.toJsonTree((WatchlistSanctionsOnlyReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ProofOfAddressReport`
                    if (value.getActualInstance() instanceof ProofOfAddressReport) {
                        JsonElement element = adapterProofOfAddressReport.toJsonTree((ProofOfAddressReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UsDrivingLicenceReport`
                    if (value.getActualInstance() instanceof UsDrivingLicenceReport) {
                        JsonElement element = adapterUsDrivingLicenceReport.toJsonTree((UsDrivingLicenceReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DeviceIntelligenceReport`
                    if (value.getActualInstance() instanceof DeviceIntelligenceReport) {
                        JsonElement element = adapterDeviceIntelligenceReport.toJsonTree((DeviceIntelligenceReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IndiaPanReport`
                    if (value.getActualInstance() instanceof IndiaPanReport) {
                        JsonElement element = adapterIndiaPanReport.toJsonTree((IndiaPanReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: DeviceIntelligenceReport, DocumentReport, DocumentVideoReport, DocumentVideoWithAddressInformationReport, DocumentWithAddressInformationReport, DocumentWithDriverVerificationReport, DocumentWithDrivingLicenceInformationReport, FacialSimilarityMotionReport, FacialSimilarityPhotoFullyAutoReport, FacialSimilarityPhotoReport, FacialSimilarityVideoReport, IdentityEnhancedReport, IndiaPanReport, KnownFacesReport, ProofOfAddressReport, UsDrivingLicenceReport, WatchlistAmlReport, WatchlistEnhancedReport, WatchlistPepsOnlyReport, WatchlistSanctionsOnlyReport, WatchlistStandardReport");
                }

                @Override
                public Report read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    JsonObject jsonObject = jsonElement.getAsJsonObject();

                    // use discriminator value for faster oneOf lookup
                    Report newReport = new Report();
                    if (jsonObject.get("name") == null) {
                        log.log(Level.WARNING, "Failed to lookup discriminator value for Report as `name` was not found in the payload or the payload is empty.");
                    } else  {
                        newReport.reportShared = adapterReportShared.fromJsonTree(jsonObject);

                        // look up the discriminator value in the field `name`
                        switch (jsonObject.get("name").getAsString()) {
                            case "device_intelligence":
                                deserialized = adapterDeviceIntelligenceReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "document":
                                deserialized = adapterDocumentReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "document_video":
                                deserialized = adapterDocumentVideoReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "document_video_with_address_information":
                                deserialized = adapterDocumentVideoWithAddressInformationReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "document_with_address_information":
                                deserialized = adapterDocumentWithAddressInformationReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "document_with_driver_verification":
                                deserialized = adapterDocumentWithDriverVerificationReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "document_with_driving_licence_information":
                                deserialized = adapterDocumentWithDrivingLicenceInformationReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "facial_similarity_motion":
                                deserialized = adapterFacialSimilarityMotionReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "facial_similarity_photo":
                                deserialized = adapterFacialSimilarityPhotoReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "facial_similarity_photo_fully_auto":
                                deserialized = adapterFacialSimilarityPhotoFullyAutoReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "facial_similarity_video":
                                deserialized = adapterFacialSimilarityVideoReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "identity_enhanced":
                                deserialized = adapterIdentityEnhancedReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "india_pan":
                                deserialized = adapterIndiaPanReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "known_faces":
                                deserialized = adapterKnownFacesReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "proof_of_address":
                                deserialized = adapterProofOfAddressReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "us_driving_licence":
                                deserialized = adapterUsDrivingLicenceReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "watchlist_aml":
                                deserialized = adapterWatchlistAmlReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "watchlist_enhanced":
                                deserialized = adapterWatchlistEnhancedReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "watchlist_peps_only":
                                deserialized = adapterWatchlistPepsOnlyReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "watchlist_sanctions_only":
                                deserialized = adapterWatchlistSanctionsOnlyReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "watchlist_standard":
                                deserialized = adapterWatchlistStandardReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "device_intelligence_report":
                                deserialized = adapterDeviceIntelligenceReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "document_report":
                                deserialized = adapterDocumentReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "document_video_report":
                                deserialized = adapterDocumentVideoReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "document_video_with_address_information_report":
                                deserialized = adapterDocumentVideoWithAddressInformationReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "document_with_address_information_report":
                                deserialized = adapterDocumentWithAddressInformationReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "document_with_driver_verification_report":
                                deserialized = adapterDocumentWithDriverVerificationReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "document_with_driving_licence_information_report":
                                deserialized = adapterDocumentWithDrivingLicenceInformationReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "facial_similarity_motion_report":
                                deserialized = adapterFacialSimilarityMotionReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "facial_similarity_photo_fully_auto_report":
                                deserialized = adapterFacialSimilarityPhotoFullyAutoReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "facial_similarity_photo_report":
                                deserialized = adapterFacialSimilarityPhotoReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "facial_similarity_video_report":
                                deserialized = adapterFacialSimilarityVideoReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "identity_enhanced_report":
                                deserialized = adapterIdentityEnhancedReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "india_pan_report":
                                deserialized = adapterIndiaPanReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "known_faces_report":
                                deserialized = adapterKnownFacesReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "proof_of_address_report":
                                deserialized = adapterProofOfAddressReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "us_driving_licence_report":
                                deserialized = adapterUsDrivingLicenceReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "watchlist_aml_report":
                                deserialized = adapterWatchlistAmlReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "watchlist_enhanced_report":
                                deserialized = adapterWatchlistEnhancedReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "watchlist_peps_only_report":
                                deserialized = adapterWatchlistPepsOnlyReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "watchlist_sanctions_only_report":
                                deserialized = adapterWatchlistSanctionsOnlyReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            case "watchlist_standard_report":
                                deserialized = adapterWatchlistStandardReport.fromJsonTree(jsonObject);
                                newReport.setActualInstance(deserialized);
                                return newReport;
                            default:
                                log.log(Level.WARNING, String.format("Failed to lookup discriminator value `%s` for Report. Possible values: device_intelligence document document_video document_video_with_address_information document_with_address_information document_with_driver_verification document_with_driving_licence_information facial_similarity_motion facial_similarity_photo facial_similarity_photo_fully_auto facial_similarity_video identity_enhanced india_pan known_faces proof_of_address us_driving_licence watchlist_aml watchlist_enhanced watchlist_peps_only watchlist_sanctions_only watchlist_standard device_intelligence_report document_report document_video_report document_video_with_address_information_report document_with_address_information_report document_with_driver_verification_report document_with_driving_licence_information_report facial_similarity_motion_report facial_similarity_photo_fully_auto_report facial_similarity_photo_report facial_similarity_video_report identity_enhanced_report india_pan_report known_faces_report proof_of_address_report us_driving_licence_report watchlist_aml_report watchlist_enhanced_report watchlist_peps_only_report watchlist_sanctions_only_report watchlist_standard_report", jsonObject.get("name").getAsString()));
                        }
                    }

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize DocumentReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DocumentReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterDocumentReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DocumentReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DocumentReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DocumentReport'", e);
                    }
                    // deserialize DocumentVideoReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DocumentVideoReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterDocumentVideoReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DocumentVideoReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DocumentVideoReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DocumentVideoReport'", e);
                    }
                    // deserialize DocumentVideoWithAddressInformationReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DocumentVideoWithAddressInformationReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterDocumentVideoWithAddressInformationReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DocumentVideoWithAddressInformationReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DocumentVideoWithAddressInformationReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DocumentVideoWithAddressInformationReport'", e);
                    }
                    // deserialize DocumentWithAddressInformationReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DocumentWithAddressInformationReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterDocumentWithAddressInformationReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DocumentWithAddressInformationReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DocumentWithAddressInformationReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DocumentWithAddressInformationReport'", e);
                    }
                    // deserialize DocumentWithDrivingLicenceInformationReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DocumentWithDrivingLicenceInformationReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterDocumentWithDrivingLicenceInformationReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DocumentWithDrivingLicenceInformationReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DocumentWithDrivingLicenceInformationReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DocumentWithDrivingLicenceInformationReport'", e);
                    }
                    // deserialize DocumentWithDriverVerificationReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DocumentWithDriverVerificationReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterDocumentWithDriverVerificationReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DocumentWithDriverVerificationReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DocumentWithDriverVerificationReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DocumentWithDriverVerificationReport'", e);
                    }
                    // deserialize FacialSimilarityPhotoReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FacialSimilarityPhotoReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterFacialSimilarityPhotoReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FacialSimilarityPhotoReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FacialSimilarityPhotoReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FacialSimilarityPhotoReport'", e);
                    }
                    // deserialize FacialSimilarityPhotoFullyAutoReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FacialSimilarityPhotoFullyAutoReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterFacialSimilarityPhotoFullyAutoReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FacialSimilarityPhotoFullyAutoReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FacialSimilarityPhotoFullyAutoReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FacialSimilarityPhotoFullyAutoReport'", e);
                    }
                    // deserialize FacialSimilarityVideoReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FacialSimilarityVideoReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterFacialSimilarityVideoReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FacialSimilarityVideoReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FacialSimilarityVideoReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FacialSimilarityVideoReport'", e);
                    }
                    // deserialize FacialSimilarityMotionReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FacialSimilarityMotionReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterFacialSimilarityMotionReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FacialSimilarityMotionReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FacialSimilarityMotionReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FacialSimilarityMotionReport'", e);
                    }
                    // deserialize KnownFacesReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        KnownFacesReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterKnownFacesReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'KnownFacesReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for KnownFacesReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'KnownFacesReport'", e);
                    }
                    // deserialize IdentityEnhancedReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IdentityEnhancedReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterIdentityEnhancedReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IdentityEnhancedReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IdentityEnhancedReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IdentityEnhancedReport'", e);
                    }
                    // deserialize WatchlistAmlReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WatchlistAmlReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterWatchlistAmlReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WatchlistAmlReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WatchlistAmlReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WatchlistAmlReport'", e);
                    }
                    // deserialize WatchlistEnhancedReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WatchlistEnhancedReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterWatchlistEnhancedReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WatchlistEnhancedReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WatchlistEnhancedReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WatchlistEnhancedReport'", e);
                    }
                    // deserialize WatchlistStandardReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WatchlistStandardReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterWatchlistStandardReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WatchlistStandardReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WatchlistStandardReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WatchlistStandardReport'", e);
                    }
                    // deserialize WatchlistPepsOnlyReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WatchlistPepsOnlyReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterWatchlistPepsOnlyReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WatchlistPepsOnlyReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WatchlistPepsOnlyReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WatchlistPepsOnlyReport'", e);
                    }
                    // deserialize WatchlistSanctionsOnlyReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WatchlistSanctionsOnlyReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterWatchlistSanctionsOnlyReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WatchlistSanctionsOnlyReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WatchlistSanctionsOnlyReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WatchlistSanctionsOnlyReport'", e);
                    }
                    // deserialize ProofOfAddressReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ProofOfAddressReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterProofOfAddressReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ProofOfAddressReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ProofOfAddressReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ProofOfAddressReport'", e);
                    }
                    // deserialize UsDrivingLicenceReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UsDrivingLicenceReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterUsDrivingLicenceReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UsDrivingLicenceReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UsDrivingLicenceReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UsDrivingLicenceReport'", e);
                    }
                    // deserialize DeviceIntelligenceReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DeviceIntelligenceReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterDeviceIntelligenceReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DeviceIntelligenceReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DeviceIntelligenceReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DeviceIntelligenceReport'", e);
                    }
                    // deserialize IndiaPanReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IndiaPanReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterIndiaPanReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IndiaPanReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IndiaPanReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IndiaPanReport'", e);
                    }

                    if (match == 1) {
                        Report ret = new Report();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for Report: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    private ReportShared reportShared;

    public Report() {
        super("oneOf", Boolean.FALSE);
    }

    public Report(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("DocumentReport", DocumentReport.class);
        schemas.put("DocumentVideoReport", DocumentVideoReport.class);
        schemas.put("DocumentVideoWithAddressInformationReport", DocumentVideoWithAddressInformationReport.class);
        schemas.put("DocumentWithAddressInformationReport", DocumentWithAddressInformationReport.class);
        schemas.put("DocumentWithDrivingLicenceInformationReport", DocumentWithDrivingLicenceInformationReport.class);
        schemas.put("DocumentWithDriverVerificationReport", DocumentWithDriverVerificationReport.class);
        schemas.put("FacialSimilarityPhotoReport", FacialSimilarityPhotoReport.class);
        schemas.put("FacialSimilarityPhotoFullyAutoReport", FacialSimilarityPhotoFullyAutoReport.class);
        schemas.put("FacialSimilarityVideoReport", FacialSimilarityVideoReport.class);
        schemas.put("FacialSimilarityMotionReport", FacialSimilarityMotionReport.class);
        schemas.put("KnownFacesReport", KnownFacesReport.class);
        schemas.put("IdentityEnhancedReport", IdentityEnhancedReport.class);
        schemas.put("WatchlistAmlReport", WatchlistAmlReport.class);
        schemas.put("WatchlistEnhancedReport", WatchlistEnhancedReport.class);
        schemas.put("WatchlistStandardReport", WatchlistStandardReport.class);
        schemas.put("WatchlistPepsOnlyReport", WatchlistPepsOnlyReport.class);
        schemas.put("WatchlistSanctionsOnlyReport", WatchlistSanctionsOnlyReport.class);
        schemas.put("ProofOfAddressReport", ProofOfAddressReport.class);
        schemas.put("UsDrivingLicenceReport", UsDrivingLicenceReport.class);
        schemas.put("DeviceIntelligenceReport", DeviceIntelligenceReport.class);
        schemas.put("IndiaPanReport", IndiaPanReport.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return Report.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * DeviceIntelligenceReport, DocumentReport, DocumentVideoReport, DocumentVideoWithAddressInformationReport, DocumentWithAddressInformationReport, DocumentWithDriverVerificationReport, DocumentWithDrivingLicenceInformationReport, FacialSimilarityMotionReport, FacialSimilarityPhotoFullyAutoReport, FacialSimilarityPhotoReport, FacialSimilarityVideoReport, IdentityEnhancedReport, IndiaPanReport, KnownFacesReport, ProofOfAddressReport, UsDrivingLicenceReport, WatchlistAmlReport, WatchlistEnhancedReport, WatchlistPepsOnlyReport, WatchlistSanctionsOnlyReport, WatchlistStandardReport
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof DocumentReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DocumentVideoReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DocumentVideoWithAddressInformationReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DocumentWithAddressInformationReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DocumentWithDrivingLicenceInformationReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DocumentWithDriverVerificationReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FacialSimilarityPhotoReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FacialSimilarityPhotoFullyAutoReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FacialSimilarityVideoReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FacialSimilarityMotionReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof KnownFacesReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IdentityEnhancedReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WatchlistAmlReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WatchlistEnhancedReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WatchlistStandardReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WatchlistPepsOnlyReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WatchlistSanctionsOnlyReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ProofOfAddressReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UsDrivingLicenceReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DeviceIntelligenceReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IndiaPanReport) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be DeviceIntelligenceReport, DocumentReport, DocumentVideoReport, DocumentVideoWithAddressInformationReport, DocumentWithAddressInformationReport, DocumentWithDriverVerificationReport, DocumentWithDrivingLicenceInformationReport, FacialSimilarityMotionReport, FacialSimilarityPhotoFullyAutoReport, FacialSimilarityPhotoReport, FacialSimilarityVideoReport, IdentityEnhancedReport, IndiaPanReport, KnownFacesReport, ProofOfAddressReport, UsDrivingLicenceReport, WatchlistAmlReport, WatchlistEnhancedReport, WatchlistPepsOnlyReport, WatchlistSanctionsOnlyReport, WatchlistStandardReport");
    }

    /**
     * Get the actual instance, which can be the following:
     * DeviceIntelligenceReport, DocumentReport, DocumentVideoReport, DocumentVideoWithAddressInformationReport, DocumentWithAddressInformationReport, DocumentWithDriverVerificationReport, DocumentWithDrivingLicenceInformationReport, FacialSimilarityMotionReport, FacialSimilarityPhotoFullyAutoReport, FacialSimilarityPhotoReport, FacialSimilarityVideoReport, IdentityEnhancedReport, IndiaPanReport, KnownFacesReport, ProofOfAddressReport, UsDrivingLicenceReport, WatchlistAmlReport, WatchlistEnhancedReport, WatchlistPepsOnlyReport, WatchlistSanctionsOnlyReport, WatchlistStandardReport
     *
     * @return The actual instance (DeviceIntelligenceReport, DocumentReport, DocumentVideoReport, DocumentVideoWithAddressInformationReport, DocumentWithAddressInformationReport, DocumentWithDriverVerificationReport, DocumentWithDrivingLicenceInformationReport, FacialSimilarityMotionReport, FacialSimilarityPhotoFullyAutoReport, FacialSimilarityPhotoReport, FacialSimilarityVideoReport, IdentityEnhancedReport, IndiaPanReport, KnownFacesReport, ProofOfAddressReport, UsDrivingLicenceReport, WatchlistAmlReport, WatchlistEnhancedReport, WatchlistPepsOnlyReport, WatchlistSanctionsOnlyReport, WatchlistStandardReport)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `DocumentReport`. If the actual instance is not `DocumentReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DocumentReport`
     * @throws ClassCastException if the instance is not `DocumentReport`
     */
    @SuppressWarnings("unchecked")
    public DocumentReport getDocumentReport() throws ClassCastException {
        return (DocumentReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DocumentVideoReport`. If the actual instance is not `DocumentVideoReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DocumentVideoReport`
     * @throws ClassCastException if the instance is not `DocumentVideoReport`
     */
    @SuppressWarnings("unchecked")
    public DocumentVideoReport getDocumentVideoReport() throws ClassCastException {
        return (DocumentVideoReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DocumentVideoWithAddressInformationReport`. If the actual instance is not `DocumentVideoWithAddressInformationReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DocumentVideoWithAddressInformationReport`
     * @throws ClassCastException if the instance is not `DocumentVideoWithAddressInformationReport`
     */
    @SuppressWarnings("unchecked")
    public DocumentVideoWithAddressInformationReport getDocumentVideoWithAddressInformationReport() throws ClassCastException {
        return (DocumentVideoWithAddressInformationReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DocumentWithAddressInformationReport`. If the actual instance is not `DocumentWithAddressInformationReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DocumentWithAddressInformationReport`
     * @throws ClassCastException if the instance is not `DocumentWithAddressInformationReport`
     */
    @SuppressWarnings("unchecked")
    public DocumentWithAddressInformationReport getDocumentWithAddressInformationReport() throws ClassCastException {
        return (DocumentWithAddressInformationReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DocumentWithDrivingLicenceInformationReport`. If the actual instance is not `DocumentWithDrivingLicenceInformationReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DocumentWithDrivingLicenceInformationReport`
     * @throws ClassCastException if the instance is not `DocumentWithDrivingLicenceInformationReport`
     */
    @SuppressWarnings("unchecked")
    public DocumentWithDrivingLicenceInformationReport getDocumentWithDrivingLicenceInformationReport() throws ClassCastException {
        return (DocumentWithDrivingLicenceInformationReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DocumentWithDriverVerificationReport`. If the actual instance is not `DocumentWithDriverVerificationReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DocumentWithDriverVerificationReport`
     * @throws ClassCastException if the instance is not `DocumentWithDriverVerificationReport`
     */
    @SuppressWarnings("unchecked")
    public DocumentWithDriverVerificationReport getDocumentWithDriverVerificationReport() throws ClassCastException {
        return (DocumentWithDriverVerificationReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `FacialSimilarityPhotoReport`. If the actual instance is not `FacialSimilarityPhotoReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FacialSimilarityPhotoReport`
     * @throws ClassCastException if the instance is not `FacialSimilarityPhotoReport`
     */
    @SuppressWarnings("unchecked")
    public FacialSimilarityPhotoReport getFacialSimilarityPhotoReport() throws ClassCastException {
        return (FacialSimilarityPhotoReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `FacialSimilarityPhotoFullyAutoReport`. If the actual instance is not `FacialSimilarityPhotoFullyAutoReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FacialSimilarityPhotoFullyAutoReport`
     * @throws ClassCastException if the instance is not `FacialSimilarityPhotoFullyAutoReport`
     */
    @SuppressWarnings("unchecked")
    public FacialSimilarityPhotoFullyAutoReport getFacialSimilarityPhotoFullyAutoReport() throws ClassCastException {
        return (FacialSimilarityPhotoFullyAutoReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `FacialSimilarityVideoReport`. If the actual instance is not `FacialSimilarityVideoReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FacialSimilarityVideoReport`
     * @throws ClassCastException if the instance is not `FacialSimilarityVideoReport`
     */
    @SuppressWarnings("unchecked")
    public FacialSimilarityVideoReport getFacialSimilarityVideoReport() throws ClassCastException {
        return (FacialSimilarityVideoReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `FacialSimilarityMotionReport`. If the actual instance is not `FacialSimilarityMotionReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FacialSimilarityMotionReport`
     * @throws ClassCastException if the instance is not `FacialSimilarityMotionReport`
     */
    @SuppressWarnings("unchecked")
    public FacialSimilarityMotionReport getFacialSimilarityMotionReport() throws ClassCastException {
        return (FacialSimilarityMotionReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `KnownFacesReport`. If the actual instance is not `KnownFacesReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `KnownFacesReport`
     * @throws ClassCastException if the instance is not `KnownFacesReport`
     */
    @SuppressWarnings("unchecked")
    public KnownFacesReport getKnownFacesReport() throws ClassCastException {
        return (KnownFacesReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IdentityEnhancedReport`. If the actual instance is not `IdentityEnhancedReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IdentityEnhancedReport`
     * @throws ClassCastException if the instance is not `IdentityEnhancedReport`
     */
    @SuppressWarnings("unchecked")
    public IdentityEnhancedReport getIdentityEnhancedReport() throws ClassCastException {
        return (IdentityEnhancedReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WatchlistAmlReport`. If the actual instance is not `WatchlistAmlReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WatchlistAmlReport`
     * @throws ClassCastException if the instance is not `WatchlistAmlReport`
     */
    @SuppressWarnings("unchecked")
    public WatchlistAmlReport getWatchlistAmlReport() throws ClassCastException {
        return (WatchlistAmlReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WatchlistEnhancedReport`. If the actual instance is not `WatchlistEnhancedReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WatchlistEnhancedReport`
     * @throws ClassCastException if the instance is not `WatchlistEnhancedReport`
     */
    @SuppressWarnings("unchecked")
    public WatchlistEnhancedReport getWatchlistEnhancedReport() throws ClassCastException {
        return (WatchlistEnhancedReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WatchlistStandardReport`. If the actual instance is not `WatchlistStandardReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WatchlistStandardReport`
     * @throws ClassCastException if the instance is not `WatchlistStandardReport`
     */
    @SuppressWarnings("unchecked")
    public WatchlistStandardReport getWatchlistStandardReport() throws ClassCastException {
        return (WatchlistStandardReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WatchlistPepsOnlyReport`. If the actual instance is not `WatchlistPepsOnlyReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WatchlistPepsOnlyReport`
     * @throws ClassCastException if the instance is not `WatchlistPepsOnlyReport`
     */
    @SuppressWarnings("unchecked")
    public WatchlistPepsOnlyReport getWatchlistPepsOnlyReport() throws ClassCastException {
        return (WatchlistPepsOnlyReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WatchlistSanctionsOnlyReport`. If the actual instance is not `WatchlistSanctionsOnlyReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WatchlistSanctionsOnlyReport`
     * @throws ClassCastException if the instance is not `WatchlistSanctionsOnlyReport`
     */
    @SuppressWarnings("unchecked")
    public WatchlistSanctionsOnlyReport getWatchlistSanctionsOnlyReport() throws ClassCastException {
        return (WatchlistSanctionsOnlyReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ProofOfAddressReport`. If the actual instance is not `ProofOfAddressReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ProofOfAddressReport`
     * @throws ClassCastException if the instance is not `ProofOfAddressReport`
     */
    @SuppressWarnings("unchecked")
    public ProofOfAddressReport getProofOfAddressReport() throws ClassCastException {
        return (ProofOfAddressReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UsDrivingLicenceReport`. If the actual instance is not `UsDrivingLicenceReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UsDrivingLicenceReport`
     * @throws ClassCastException if the instance is not `UsDrivingLicenceReport`
     */
    @SuppressWarnings("unchecked")
    public UsDrivingLicenceReport getUsDrivingLicenceReport() throws ClassCastException {
        return (UsDrivingLicenceReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DeviceIntelligenceReport`. If the actual instance is not `DeviceIntelligenceReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DeviceIntelligenceReport`
     * @throws ClassCastException if the instance is not `DeviceIntelligenceReport`
     */
    @SuppressWarnings("unchecked")
    public DeviceIntelligenceReport getDeviceIntelligenceReport() throws ClassCastException {
        return (DeviceIntelligenceReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IndiaPanReport`. If the actual instance is not `IndiaPanReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IndiaPanReport`
     * @throws ClassCastException if the instance is not `IndiaPanReport`
     */
    @SuppressWarnings("unchecked")
    public IndiaPanReport getIndiaPanReport() throws ClassCastException {
        return (IndiaPanReport)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Report
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with DocumentReport
        try {
            DocumentReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DocumentReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DocumentVideoReport
        try {
            DocumentVideoReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DocumentVideoReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DocumentVideoWithAddressInformationReport
        try {
            DocumentVideoWithAddressInformationReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DocumentVideoWithAddressInformationReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DocumentWithAddressInformationReport
        try {
            DocumentWithAddressInformationReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DocumentWithAddressInformationReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DocumentWithDrivingLicenceInformationReport
        try {
            DocumentWithDrivingLicenceInformationReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DocumentWithDrivingLicenceInformationReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DocumentWithDriverVerificationReport
        try {
            DocumentWithDriverVerificationReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DocumentWithDriverVerificationReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FacialSimilarityPhotoReport
        try {
            FacialSimilarityPhotoReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FacialSimilarityPhotoReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FacialSimilarityPhotoFullyAutoReport
        try {
            FacialSimilarityPhotoFullyAutoReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FacialSimilarityPhotoFullyAutoReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FacialSimilarityVideoReport
        try {
            FacialSimilarityVideoReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FacialSimilarityVideoReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FacialSimilarityMotionReport
        try {
            FacialSimilarityMotionReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FacialSimilarityMotionReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with KnownFacesReport
        try {
            KnownFacesReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for KnownFacesReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IdentityEnhancedReport
        try {
            IdentityEnhancedReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IdentityEnhancedReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WatchlistAmlReport
        try {
            WatchlistAmlReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WatchlistAmlReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WatchlistEnhancedReport
        try {
            WatchlistEnhancedReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WatchlistEnhancedReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WatchlistStandardReport
        try {
            WatchlistStandardReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WatchlistStandardReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WatchlistPepsOnlyReport
        try {
            WatchlistPepsOnlyReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WatchlistPepsOnlyReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WatchlistSanctionsOnlyReport
        try {
            WatchlistSanctionsOnlyReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WatchlistSanctionsOnlyReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ProofOfAddressReport
        try {
            ProofOfAddressReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ProofOfAddressReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UsDrivingLicenceReport
        try {
            UsDrivingLicenceReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UsDrivingLicenceReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DeviceIntelligenceReport
        try {
            DeviceIntelligenceReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DeviceIntelligenceReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IndiaPanReport
        try {
            IndiaPanReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IndiaPanReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount < 1) {
            throw new IOException(String.format("The JSON string is invalid for Report with oneOf schemas: DeviceIntelligenceReport, DocumentReport, DocumentVideoReport, DocumentVideoWithAddressInformationReport, DocumentWithAddressInformationReport, DocumentWithDriverVerificationReport, DocumentWithDrivingLicenceInformationReport, FacialSimilarityMotionReport, FacialSimilarityPhotoFullyAutoReport, FacialSimilarityPhotoReport, FacialSimilarityVideoReport, IdentityEnhancedReport, IndiaPanReport, KnownFacesReport, ProofOfAddressReport, UsDrivingLicenceReport, WatchlistAmlReport, WatchlistEnhancedReport, WatchlistPepsOnlyReport, WatchlistSanctionsOnlyReport, WatchlistStandardReport. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of Report given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Report
     * @throws IOException if the JSON string is invalid with respect to Report
     */
    public static Report fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Report.class);
    }

    /**
     * Convert an instance of Report to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }


    /**
     * Give access to shared properties. Read-only.
     * @return ReportShared object with common fields
     **/

    public ReportShared getReportShared() {
        return reportShared;
    }

    /**
     * Give access to shared properties. Read-only.
     * @return id
     **/

    public UUID getId() {
        return reportShared.getId();
    }

    /**
     * Get name
     * @return name
     **/

    public ReportName getName() {
        return reportShared.getName();
    }

    /**
     * Get status
     * @return status
     **/

    public ReportStatus getStatus() {
        return reportShared.getStatus();
    }

}

