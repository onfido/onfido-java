/*
 * Onfido API v3.6
 * The Onfido API (v3.6)
 *
 * The version of the OpenAPI document: v3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.onfido.JSON;

/**
 * TaskItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class TaskItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_WORKFLOW_RUN_ID = "workflow_run_id";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_RUN_ID)
  private UUID workflowRunId;

  public static final String SERIALIZED_NAME_TASK_DEF_ID = "task_def_id";
  @SerializedName(SERIALIZED_NAME_TASK_DEF_ID)
  private String taskDefId;

  public static final String SERIALIZED_NAME_TASK_DEF_VERSION = "task_def_version";
  @SerializedName(SERIALIZED_NAME_TASK_DEF_VERSION)
  private String taskDefVersion;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public TaskItem() {
  }

  public TaskItem id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The identifier for the Task.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TaskItem workflowRunId(UUID workflowRunId) {
    this.workflowRunId = workflowRunId;
    return this;
  }

   /**
   * The workflow run id the task belongs to.
   * @return workflowRunId
  **/
  @javax.annotation.Nullable
  public UUID getWorkflowRunId() {
    return workflowRunId;
  }

  public void setWorkflowRunId(UUID workflowRunId) {
    this.workflowRunId = workflowRunId;
  }


  public TaskItem taskDefId(String taskDefId) {
    this.taskDefId = taskDefId;
    return this;
  }

   /**
   * The identifier for the Task Definition.
   * @return taskDefId
  **/
  @javax.annotation.Nullable
  public String getTaskDefId() {
    return taskDefId;
  }

  public void setTaskDefId(String taskDefId) {
    this.taskDefId = taskDefId;
  }


  public TaskItem taskDefVersion(String taskDefVersion) {
    this.taskDefVersion = taskDefVersion;
    return this;
  }

   /**
   * The task definition version.
   * @return taskDefVersion
  **/
  @javax.annotation.Nullable
  public String getTaskDefVersion() {
    return taskDefVersion;
  }

  public void setTaskDefVersion(String taskDefVersion) {
    this.taskDefVersion = taskDefVersion;
  }


  public TaskItem createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time when the Task was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TaskItem updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The date and time when the Task was last updated.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TaskItem instance itself
   */
  public TaskItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskItem taskItem = (TaskItem) o;
    return Objects.equals(this.id, taskItem.id) &&
        Objects.equals(this.workflowRunId, taskItem.workflowRunId) &&
        Objects.equals(this.taskDefId, taskItem.taskDefId) &&
        Objects.equals(this.taskDefVersion, taskItem.taskDefVersion) &&
        Objects.equals(this.createdAt, taskItem.createdAt) &&
        Objects.equals(this.updatedAt, taskItem.updatedAt)&&
        Objects.equals(this.additionalProperties, taskItem.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, workflowRunId, taskDefId, taskDefVersion, createdAt, updatedAt, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    workflowRunId: ").append(toIndentedString(workflowRunId)).append("\n");
    sb.append("    taskDefId: ").append(toIndentedString(taskDefId)).append("\n");
    sb.append("    taskDefVersion: ").append(toIndentedString(taskDefVersion)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("workflow_run_id");
    openapiFields.add("task_def_id");
    openapiFields.add("task_def_version");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TaskItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskItem is not found in the empty JSON string", TaskItem.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("workflow_run_id") != null && !jsonObj.get("workflow_run_id").isJsonNull()) && !jsonObj.get("workflow_run_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflow_run_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflow_run_id").toString()));
      }
      if ((jsonObj.get("task_def_id") != null && !jsonObj.get("task_def_id").isJsonNull()) && !jsonObj.get("task_def_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_def_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task_def_id").toString()));
      }
      if ((jsonObj.get("task_def_version") != null && !jsonObj.get("task_def_version").isJsonNull()) && !jsonObj.get("task_def_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_def_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task_def_version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskItem.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskItem>() {
           @Override
           public void write(JsonWriter out, TaskItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else if (jsonElement.isJsonObject()) { 
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             TaskItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaskItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaskItem
  * @throws IOException if the JSON string is invalid with respect to TaskItem
  */
  public static TaskItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskItem.class);
  }

 /**
  * Convert an instance of TaskItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

