/*
 * Onfido API v3.6
 * The Onfido API (v3.6)
 *
 * The version of the OpenAPI document: v3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.onfido.model.WatchlistEnhancedPropertiesRecordsInnerAddressInner;
import com.onfido.model.WatchlistEnhancedPropertiesRecordsInnerAliasInner;
import com.onfido.model.WatchlistEnhancedPropertiesRecordsInnerAssociateInner;
import com.onfido.model.WatchlistEnhancedPropertiesRecordsInnerAttributeInner;
import com.onfido.model.WatchlistEnhancedPropertiesRecordsInnerEventInner;
import com.onfido.model.WatchlistEnhancedPropertiesRecordsInnerSourceInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.onfido.JSON;

/**
 * WatchlistEnhancedPropertiesRecordsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class WatchlistEnhancedPropertiesRecordsInner {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private List<WatchlistEnhancedPropertiesRecordsInnerAddressInner> address = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private List<WatchlistEnhancedPropertiesRecordsInnerAliasInner> alias = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSOCIATE = "associate";
  @SerializedName(SERIALIZED_NAME_ASSOCIATE)
  private List<WatchlistEnhancedPropertiesRecordsInnerAssociateInner> associate = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTRIBUTE = "attribute";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE)
  private List<WatchlistEnhancedPropertiesRecordsInnerAttributeInner> attribute = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "date_of_birth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private List<String> dateOfBirth = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private List<WatchlistEnhancedPropertiesRecordsInnerEventInner> event = new ArrayList<>();

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private List<String> position = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private List<WatchlistEnhancedPropertiesRecordsInnerSourceInner> source = new ArrayList<>();

  public WatchlistEnhancedPropertiesRecordsInner() {
  }

  public WatchlistEnhancedPropertiesRecordsInner address(List<WatchlistEnhancedPropertiesRecordsInnerAddressInner> address) {
    this.address = address;
    return this;
  }

  public WatchlistEnhancedPropertiesRecordsInner addAddressItem(WatchlistEnhancedPropertiesRecordsInnerAddressInner addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<>();
    }
    this.address.add(addressItem);
    return this;
  }

   /**
   * All addresses on file.
   * @return address
  **/
  @javax.annotation.Nullable
  public List<WatchlistEnhancedPropertiesRecordsInnerAddressInner> getAddress() {
    return address;
  }

  public void setAddress(List<WatchlistEnhancedPropertiesRecordsInnerAddressInner> address) {
    this.address = address;
  }


  public WatchlistEnhancedPropertiesRecordsInner alias(List<WatchlistEnhancedPropertiesRecordsInnerAliasInner> alias) {
    this.alias = alias;
    return this;
  }

  public WatchlistEnhancedPropertiesRecordsInner addAliasItem(WatchlistEnhancedPropertiesRecordsInnerAliasInner aliasItem) {
    if (this.alias == null) {
      this.alias = new ArrayList<>();
    }
    this.alias.add(aliasItem);
    return this;
  }

   /**
   * Any names that the person is also known as.
   * @return alias
  **/
  @javax.annotation.Nullable
  public List<WatchlistEnhancedPropertiesRecordsInnerAliasInner> getAlias() {
    return alias;
  }

  public void setAlias(List<WatchlistEnhancedPropertiesRecordsInnerAliasInner> alias) {
    this.alias = alias;
  }


  public WatchlistEnhancedPropertiesRecordsInner associate(List<WatchlistEnhancedPropertiesRecordsInnerAssociateInner> associate) {
    this.associate = associate;
    return this;
  }

  public WatchlistEnhancedPropertiesRecordsInner addAssociateItem(WatchlistEnhancedPropertiesRecordsInnerAssociateInner associateItem) {
    if (this.associate == null) {
      this.associate = new ArrayList<>();
    }
    this.associate.add(associateItem);
    return this;
  }

   /**
   * Any linked persons, for example family relatives or business partners.
   * @return associate
  **/
  @javax.annotation.Nullable
  public List<WatchlistEnhancedPropertiesRecordsInnerAssociateInner> getAssociate() {
    return associate;
  }

  public void setAssociate(List<WatchlistEnhancedPropertiesRecordsInnerAssociateInner> associate) {
    this.associate = associate;
  }


  public WatchlistEnhancedPropertiesRecordsInner attribute(List<WatchlistEnhancedPropertiesRecordsInnerAttributeInner> attribute) {
    this.attribute = attribute;
    return this;
  }

  public WatchlistEnhancedPropertiesRecordsInner addAttributeItem(WatchlistEnhancedPropertiesRecordsInnerAttributeInner attributeItem) {
    if (this.attribute == null) {
      this.attribute = new ArrayList<>();
    }
    this.attribute.add(attributeItem);
    return this;
  }

   /**
   * Information about the person, for example hair color or nationality.
   * @return attribute
  **/
  @javax.annotation.Nullable
  public List<WatchlistEnhancedPropertiesRecordsInnerAttributeInner> getAttribute() {
    return attribute;
  }

  public void setAttribute(List<WatchlistEnhancedPropertiesRecordsInnerAttributeInner> attribute) {
    this.attribute = attribute;
  }


  public WatchlistEnhancedPropertiesRecordsInner dateOfBirth(List<String> dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  public WatchlistEnhancedPropertiesRecordsInner addDateOfBirthItem(String dateOfBirthItem) {
    if (this.dateOfBirth == null) {
      this.dateOfBirth = new ArrayList<>();
    }
    this.dateOfBirth.add(dateOfBirthItem);
    return this;
  }

   /**
   * All the date of births on file.
   * @return dateOfBirth
  **/
  @javax.annotation.Nullable
  public List<String> getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(List<String> dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public WatchlistEnhancedPropertiesRecordsInner event(List<WatchlistEnhancedPropertiesRecordsInnerEventInner> event) {
    this.event = event;
    return this;
  }

  public WatchlistEnhancedPropertiesRecordsInner addEventItem(WatchlistEnhancedPropertiesRecordsInnerEventInner eventItem) {
    if (this.event == null) {
      this.event = new ArrayList<>();
    }
    this.event.add(eventItem);
    return this;
  }

   /**
   * Information about events that have occurred to the person, for example deportation or arrest.
   * @return event
  **/
  @javax.annotation.Nullable
  public List<WatchlistEnhancedPropertiesRecordsInnerEventInner> getEvent() {
    return event;
  }

  public void setEvent(List<WatchlistEnhancedPropertiesRecordsInnerEventInner> event) {
    this.event = event;
  }


  public WatchlistEnhancedPropertiesRecordsInner fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

   /**
   * The name on file
   * @return fullName
  **/
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public WatchlistEnhancedPropertiesRecordsInner position(List<String> position) {
    this.position = position;
    return this;
  }

  public WatchlistEnhancedPropertiesRecordsInner addPositionItem(String positionItem) {
    if (this.position == null) {
      this.position = new ArrayList<>();
    }
    this.position.add(positionItem);
    return this;
  }

   /**
   * The role, country and date of each position.
   * @return position
  **/
  @javax.annotation.Nullable
  public List<String> getPosition() {
    return position;
  }

  public void setPosition(List<String> position) {
    this.position = position;
  }


  public WatchlistEnhancedPropertiesRecordsInner source(List<WatchlistEnhancedPropertiesRecordsInnerSourceInner> source) {
    this.source = source;
    return this;
  }

  public WatchlistEnhancedPropertiesRecordsInner addSourceItem(WatchlistEnhancedPropertiesRecordsInnerSourceInner sourceItem) {
    if (this.source == null) {
      this.source = new ArrayList<>();
    }
    this.source.add(sourceItem);
    return this;
  }

   /**
   * Details about where the information was obtained.
   * @return source
  **/
  @javax.annotation.Nullable
  public List<WatchlistEnhancedPropertiesRecordsInnerSourceInner> getSource() {
    return source;
  }

  public void setSource(List<WatchlistEnhancedPropertiesRecordsInnerSourceInner> source) {
    this.source = source;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WatchlistEnhancedPropertiesRecordsInner instance itself
   */
  public WatchlistEnhancedPropertiesRecordsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WatchlistEnhancedPropertiesRecordsInner watchlistEnhancedPropertiesRecordsInner = (WatchlistEnhancedPropertiesRecordsInner) o;
    return Objects.equals(this.address, watchlistEnhancedPropertiesRecordsInner.address) &&
        Objects.equals(this.alias, watchlistEnhancedPropertiesRecordsInner.alias) &&
        Objects.equals(this.associate, watchlistEnhancedPropertiesRecordsInner.associate) &&
        Objects.equals(this.attribute, watchlistEnhancedPropertiesRecordsInner.attribute) &&
        Objects.equals(this.dateOfBirth, watchlistEnhancedPropertiesRecordsInner.dateOfBirth) &&
        Objects.equals(this.event, watchlistEnhancedPropertiesRecordsInner.event) &&
        Objects.equals(this.fullName, watchlistEnhancedPropertiesRecordsInner.fullName) &&
        Objects.equals(this.position, watchlistEnhancedPropertiesRecordsInner.position) &&
        Objects.equals(this.source, watchlistEnhancedPropertiesRecordsInner.source)&&
        Objects.equals(this.additionalProperties, watchlistEnhancedPropertiesRecordsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, alias, associate, attribute, dateOfBirth, event, fullName, position, source, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WatchlistEnhancedPropertiesRecordsInner {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    associate: ").append(toIndentedString(associate)).append("\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("alias");
    openapiFields.add("associate");
    openapiFields.add("attribute");
    openapiFields.add("date_of_birth");
    openapiFields.add("event");
    openapiFields.add("full_name");
    openapiFields.add("position");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WatchlistEnhancedPropertiesRecordsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WatchlistEnhancedPropertiesRecordsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WatchlistEnhancedPropertiesRecordsInner is not found in the empty JSON string", WatchlistEnhancedPropertiesRecordsInner.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        JsonArray jsonArrayaddress = jsonObj.getAsJsonArray("address");
        if (jsonArrayaddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("address").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `address` to be an array in the JSON string but got `%s`", jsonObj.get("address").toString()));
          }

          // validate the optional field `address` (array)
          for (int i = 0; i < jsonArrayaddress.size(); i++) {
            WatchlistEnhancedPropertiesRecordsInnerAddressInner.validateJsonElement(jsonArrayaddress.get(i));
          };
        }
      }
      if (jsonObj.get("alias") != null && !jsonObj.get("alias").isJsonNull()) {
        JsonArray jsonArrayalias = jsonObj.getAsJsonArray("alias");
        if (jsonArrayalias != null) {
          // ensure the json data is an array
          if (!jsonObj.get("alias").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `alias` to be an array in the JSON string but got `%s`", jsonObj.get("alias").toString()));
          }

          // validate the optional field `alias` (array)
          for (int i = 0; i < jsonArrayalias.size(); i++) {
            WatchlistEnhancedPropertiesRecordsInnerAliasInner.validateJsonElement(jsonArrayalias.get(i));
          };
        }
      }
      if (jsonObj.get("associate") != null && !jsonObj.get("associate").isJsonNull()) {
        JsonArray jsonArrayassociate = jsonObj.getAsJsonArray("associate");
        if (jsonArrayassociate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("associate").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `associate` to be an array in the JSON string but got `%s`", jsonObj.get("associate").toString()));
          }

          // validate the optional field `associate` (array)
          for (int i = 0; i < jsonArrayassociate.size(); i++) {
            WatchlistEnhancedPropertiesRecordsInnerAssociateInner.validateJsonElement(jsonArrayassociate.get(i));
          };
        }
      }
      if (jsonObj.get("attribute") != null && !jsonObj.get("attribute").isJsonNull()) {
        JsonArray jsonArrayattribute = jsonObj.getAsJsonArray("attribute");
        if (jsonArrayattribute != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attribute").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attribute` to be an array in the JSON string but got `%s`", jsonObj.get("attribute").toString()));
          }

          // validate the optional field `attribute` (array)
          for (int i = 0; i < jsonArrayattribute.size(); i++) {
            WatchlistEnhancedPropertiesRecordsInnerAttributeInner.validateJsonElement(jsonArrayattribute.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("date_of_birth") != null && !jsonObj.get("date_of_birth").isJsonNull() && !jsonObj.get("date_of_birth").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_of_birth` to be an array in the JSON string but got `%s`", jsonObj.get("date_of_birth").toString()));
      }
      if (jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) {
        JsonArray jsonArrayevent = jsonObj.getAsJsonArray("event");
        if (jsonArrayevent != null) {
          // ensure the json data is an array
          if (!jsonObj.get("event").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `event` to be an array in the JSON string but got `%s`", jsonObj.get("event").toString()));
          }

          // validate the optional field `event` (array)
          for (int i = 0; i < jsonArrayevent.size(); i++) {
            WatchlistEnhancedPropertiesRecordsInnerEventInner.validateJsonElement(jsonArrayevent.get(i));
          };
        }
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull() && !jsonObj.get("position").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be an array in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        JsonArray jsonArraysource = jsonObj.getAsJsonArray("source");
        if (jsonArraysource != null) {
          // ensure the json data is an array
          if (!jsonObj.get("source").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `source` to be an array in the JSON string but got `%s`", jsonObj.get("source").toString()));
          }

          // validate the optional field `source` (array)
          for (int i = 0; i < jsonArraysource.size(); i++) {
            WatchlistEnhancedPropertiesRecordsInnerSourceInner.validateJsonElement(jsonArraysource.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WatchlistEnhancedPropertiesRecordsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WatchlistEnhancedPropertiesRecordsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WatchlistEnhancedPropertiesRecordsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WatchlistEnhancedPropertiesRecordsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<WatchlistEnhancedPropertiesRecordsInner>() {
           @Override
           public void write(JsonWriter out, WatchlistEnhancedPropertiesRecordsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else if (jsonElement.isJsonObject()) { 
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WatchlistEnhancedPropertiesRecordsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             WatchlistEnhancedPropertiesRecordsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WatchlistEnhancedPropertiesRecordsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WatchlistEnhancedPropertiesRecordsInner
  * @throws IOException if the JSON string is invalid with respect to WatchlistEnhancedPropertiesRecordsInner
  */
  public static WatchlistEnhancedPropertiesRecordsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WatchlistEnhancedPropertiesRecordsInner.class);
  }

 /**
  * Convert an instance of WatchlistEnhancedPropertiesRecordsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

