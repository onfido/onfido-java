/*
 * Onfido API v3.6
 * The Onfido API (v3.6)
 *
 * The version of the OpenAPI document: v3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onfido.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.onfido.JSON;

/**
 * PhotoAutoReasons
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class PhotoAutoReasons {
  public static final String SERIALIZED_NAME_DIGITAL_TAMPERING = "digital_tampering";
  @SerializedName(SERIALIZED_NAME_DIGITAL_TAMPERING)
  private String digitalTampering;

  public static final String SERIALIZED_NAME_FAKE_WEBCAM = "fake_webcam";
  @SerializedName(SERIALIZED_NAME_FAKE_WEBCAM)
  private String fakeWebcam;

  public static final String SERIALIZED_NAME_TIME_OF_CAPTURE = "time_of_capture";
  @SerializedName(SERIALIZED_NAME_TIME_OF_CAPTURE)
  private String timeOfCapture;

  public static final String SERIALIZED_NAME_EMULATOR = "emulator";
  @SerializedName(SERIALIZED_NAME_EMULATOR)
  private String emulator;

  public static final String SERIALIZED_NAME_REASONS = "reasons";
  @SerializedName(SERIALIZED_NAME_REASONS)
  private String reasons;

  public PhotoAutoReasons() {
  }

  public PhotoAutoReasons digitalTampering(String digitalTampering) {
    this.digitalTampering = digitalTampering;
    return this;
  }

   /**
   * Flags when evidence is found that the image was manipulated by Photoshop, or other software.
   * @return digitalTampering
  **/
  @javax.annotation.Nullable
  public String getDigitalTampering() {
    return digitalTampering;
  }

  public void setDigitalTampering(String digitalTampering) {
    this.digitalTampering = digitalTampering;
  }


  public PhotoAutoReasons fakeWebcam(String fakeWebcam) {
    this.fakeWebcam = fakeWebcam;
    return this;
  }

   /**
   * Flags when evidence is found that a fake webcam was used.
   * @return fakeWebcam
  **/
  @javax.annotation.Nullable
  public String getFakeWebcam() {
    return fakeWebcam;
  }

  public void setFakeWebcam(String fakeWebcam) {
    this.fakeWebcam = fakeWebcam;
  }


  public PhotoAutoReasons timeOfCapture(String timeOfCapture) {
    this.timeOfCapture = timeOfCapture;
    return this;
  }

   /**
   * Flags when evidence is found that the live photo was taken more than 24 hours before live photo upload.
   * @return timeOfCapture
  **/
  @javax.annotation.Nullable
  public String getTimeOfCapture() {
    return timeOfCapture;
  }

  public void setTimeOfCapture(String timeOfCapture) {
    this.timeOfCapture = timeOfCapture;
  }


  public PhotoAutoReasons emulator(String emulator) {
    this.emulator = emulator;
    return this;
  }

   /**
   * Flags when evidence is found that an Android emulator was used.
   * @return emulator
  **/
  @javax.annotation.Nullable
  public String getEmulator() {
    return emulator;
  }

  public void setEmulator(String emulator) {
    this.emulator = emulator;
  }


  public PhotoAutoReasons reasons(String reasons) {
    this.reasons = reasons;
    return this;
  }

   /**
   * Additional comma separated details such as the exact digital tampering software used, or the name of the fake webcam.
   * @return reasons
  **/
  @javax.annotation.Nullable
  public String getReasons() {
    return reasons;
  }

  public void setReasons(String reasons) {
    this.reasons = reasons;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PhotoAutoReasons instance itself
   */
  public PhotoAutoReasons putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhotoAutoReasons photoAutoReasons = (PhotoAutoReasons) o;
    return Objects.equals(this.digitalTampering, photoAutoReasons.digitalTampering) &&
        Objects.equals(this.fakeWebcam, photoAutoReasons.fakeWebcam) &&
        Objects.equals(this.timeOfCapture, photoAutoReasons.timeOfCapture) &&
        Objects.equals(this.emulator, photoAutoReasons.emulator) &&
        Objects.equals(this.reasons, photoAutoReasons.reasons)&&
        Objects.equals(this.additionalProperties, photoAutoReasons.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(digitalTampering, fakeWebcam, timeOfCapture, emulator, reasons, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhotoAutoReasons {\n");
    sb.append("    digitalTampering: ").append(toIndentedString(digitalTampering)).append("\n");
    sb.append("    fakeWebcam: ").append(toIndentedString(fakeWebcam)).append("\n");
    sb.append("    timeOfCapture: ").append(toIndentedString(timeOfCapture)).append("\n");
    sb.append("    emulator: ").append(toIndentedString(emulator)).append("\n");
    sb.append("    reasons: ").append(toIndentedString(reasons)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("digital_tampering");
    openapiFields.add("fake_webcam");
    openapiFields.add("time_of_capture");
    openapiFields.add("emulator");
    openapiFields.add("reasons");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PhotoAutoReasons
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhotoAutoReasons.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhotoAutoReasons is not found in the empty JSON string", PhotoAutoReasons.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("digital_tampering") != null && !jsonObj.get("digital_tampering").isJsonNull()) && !jsonObj.get("digital_tampering").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digital_tampering` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digital_tampering").toString()));
      }
      if ((jsonObj.get("fake_webcam") != null && !jsonObj.get("fake_webcam").isJsonNull()) && !jsonObj.get("fake_webcam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fake_webcam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fake_webcam").toString()));
      }
      if ((jsonObj.get("time_of_capture") != null && !jsonObj.get("time_of_capture").isJsonNull()) && !jsonObj.get("time_of_capture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_of_capture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_of_capture").toString()));
      }
      if ((jsonObj.get("emulator") != null && !jsonObj.get("emulator").isJsonNull()) && !jsonObj.get("emulator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emulator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emulator").toString()));
      }
      if ((jsonObj.get("reasons") != null && !jsonObj.get("reasons").isJsonNull()) && !jsonObj.get("reasons").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasons` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasons").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhotoAutoReasons.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhotoAutoReasons' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhotoAutoReasons> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhotoAutoReasons.class));

       return (TypeAdapter<T>) new TypeAdapter<PhotoAutoReasons>() {
           @Override
           public void write(JsonWriter out, PhotoAutoReasons value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else if (jsonElement.isJsonObject()) { 
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PhotoAutoReasons read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PhotoAutoReasons instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PhotoAutoReasons given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PhotoAutoReasons
  * @throws IOException if the JSON string is invalid with respect to PhotoAutoReasons
  */
  public static PhotoAutoReasons fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhotoAutoReasons.class);
  }

 /**
  * Convert an instance of PhotoAutoReasons to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

